C51 COMPILER V9.60.7.0   MAIN                                                              07/31/2023 19:04:30 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <stc8h.h>
   2          #include <intrins.h>
   3          #define MAX_TASKS 2 //简化方面,我们当前操作系统只有2个task
   4          #define MAX_TASK_DEP 32
   5          
   6          unsigned char idata task_sp[MAX_TASKS];  // 任务的堆栈指针
   7          unsigned char idata task_stack[MAX_TASKS][MAX_TASK_DEP];// 每个一个task任务的堆栈
   8          unsigned char task_id; //当前任务号， 从0开始。
   9          
  10          //任务状态
  11          typedef enum{
  12            TASK_RUNNING, //运行状态
  13            TASK_SUSPENDED  //挂起状态
  14          } TaskStatus;
  15          
  16          
  17          typedef struct{
  18              unsigned char id; //任务id
  19              TaskStatus status; //任务状态
  20              unsigned int delay_count; // 延迟计数器
  21              unsigned int delay_duration;//延迟时间
  22          }Task ;
  23          
  24          Task idata tasks[MAX_TASKS] = {
  25            {0, TASK_RUNNING,0,0},
  26            {1, TASK_RUNNING,0,0},   //两个任务，都是默认运行状态，不延时，
  27          };
  28          
  29          void Timer0_init(void); //原型函数 
  30          void sleep(unsigned int , unsigned int );// tid, delay_ms
  31          
  32          void sleep(unsigned int task_id , unsigned int delay_ms){
  33   1          tasks[task_id].status = TASK_SUSPENDED;
  34   1          tasks[task_id].delay_count = 0;
  35   1          tasks[task_id].delay_duration = delay_ms;
  36   1        
  37   1      }
  38          
  39          void Timer0_init(){
  40   1         AUXR |= 0x80;    //定时器时钟1T模式
  41   1          TMOD &= 0xF0;   //设置定时器模式
  42   1          EA = 1; // 全局中断允许
  43   1          ET0 = 1; // 定时器0中断允许
  44   1          TR0 = 1;    //定时器0开始计时
  45   1        TL0 = 0x40;   //设置定时初始值
  46   1          TH0 = 0xA2;   //设置定时初始值
  47   1        
  48   1      }
  49          
  50          
  51          void Delay1000ms()    //@24.000MHz
  52          {
  53   1        unsigned char i, j, k;
  54   1      
C51 COMPILER V9.60.7.0   MAIN                                                              07/31/2023 19:04:30 PAGE 2   

  55   1        _nop_();
  56   1        _nop_();
  57   1        i = 122;
  58   1        j = 193;
  59   1        k = 128;
  60   1        do
  61   1        {
  62   2          do
  63   2          {
  64   3            while (--k);
  65   3          } while (--j);
  66   2        } while (--i);
  67   1      }
  68          
  69          
  70          //定义一个任务切换的函数(任务调度器)
  71          void task_switch(){
  72   1        
  73   1         task_sp[task_id] = SP;// 把当前系统的堆栈指针存入到某个小朋友的task_sp里面。
  74   1        
  75   1         task_id = task_id + 1; //任务加1
  76   1         if(task_id == MAX_TASKS){   
  77   2           task_id = 0;
  78   2         } 
  79   1         SP = task_sp[task_id];
  80   1      }
  81          
  82          
  83          
  84          void task0(){
  85   1        //第0号任务， 代表第0个小朋友做的事情。
  86   1        //static unsigned int a = 3;
  87   1        P5M0 = 0x00;
  88   1        P5M1 = 0x00;
  89   1        
  90   1        P53 = 1;
  91   1        while(1){
  92   2          //a = a + 3;
  93   2          //Delay1000ms();
  94   2          //检查自己的状态。如果自己是睡眠状态，就应该交给别的task去执行
  95   2          if(tasks[0].status == TASK_SUSPENDED){
  96   3            task_switch();
  97   3            continue;
  98   3          }
  99   2          
 100   2          sleep(0,1000);
 101   2          P53 = ~P53;
 102   2          task_switch();
 103   2        }
 104   1      }
 105          
 106          void task1(){
 107   1        //第1号任务， 代表第1个小朋友做的事情。
 108   1        //static unsigned int b = 5;
 109   1        P4M1 = 0x00;
 110   1        P4M0 = 0x00;
 111   1        P2M1 = 0x00;
 112   1        P2M0 = 0x00;
 113   1        P27 = 0;
 114   1        
 115   1        
 116   1        while(1){
C51 COMPILER V9.60.7.0   MAIN                                                              07/31/2023 19:04:30 PAGE 3   

 117   2              //检查自己的状态。如果自己是睡眠状态，就应该交给别的task去执行
 118   2          if(tasks[1].status == TASK_SUSPENDED){
 119   3            task_switch();
 120   3            continue;
 121   3          }
 122   2          //b = b + 5;
 123   2          //Delay1000ms();
 124   2          sleep(1,1000);
 125   2          P27 = ~P27; 
 126   2          task_switch();
 127   2        }
 128   1      }
 129          
 130          
 131          void Timer0_ISR(void) interrupt 1 {
 132   1        //系统的定时器中断， 每隔1毫秒就执行一下中断函数
 133   1         unsigned char i;
 134   1          
 135   1         for(i =0 ;i<MAX_TASKS;i++){
 136   2            if(tasks[i].status == TASK_SUSPENDED){
 137   3              tasks[i].delay_count++;
 138   3            }
 139   2            
 140   2            if(tasks[i].delay_count >= tasks[i].delay_duration){
 141   3              tasks[i].status = TASK_RUNNING; //睡眠结束     
 142   3              tasks[i].delay_count = 0;
 143   3            }
 144   2           
 145   2         }
 146   1           
 147   1      }
 148          
 149          void Timer1_Init(void)    //100微秒@24.000MHz
 150          {
 151   1        AUXR |= 0x40;     //定时器时钟1T模式
 152   1        TMOD &= 0x0F;     //设置定时器模式
 153   1        TL1 = 0xA0;       //设置定时初始值
 154   1        TH1 = 0xF6;       //设置定时初始值
 155   1        TF1 = 0;        //清除TF1标志
 156   1        TR1 = 1;        //定时器1开始计时
 157   1      }
 158          
 159          void Timer1_ISR(void) interrupt 3{
 160   1        task_switch();// 在timer1中的中断，进行任务切换。
 161   1      }
 162          
 163          
 164          
 165          //幼儿园老师（操作系统，加载任务的函数）
 166          //fn fn是一个函数的指针，注意数据类型是int 16位的。
 167          //tid task id， 是8位的， 0,1 
 168          //下面函数的作用就是把一个task的函数指针放入对应的堆栈空间里面。
 169          void task_load(unsigned int fn, unsigned char tid){
 170   1        task_sp[tid] =  task_stack[tid] + 1; // 把任务的指针往下一个空间挪一格，两个char了
 171   1        task_stack[tid][0] = fn& 0xff;
 172   1        task_stack[tid][1] = fn>>8; 
 173   1      }
 174          
 175          
 176          void main(){
 177   1           Timer0_init();
 178   1           Timer1_Init();
C51 COMPILER V9.60.7.0   MAIN                                                              07/31/2023 19:04:30 PAGE 4   

 179   1           task_load(task0,0);// 把task0 装载到内存中。
 180   1           task_load(task1,1);// 把task1 装载到内存中。
 181   1           task_id = 0;   
 182   1           SP = task_sp[0];
 183   1      }
 184          
 185          
 186          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    393    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =     78    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
